{
    "hints": {
        "createApplication()void": {
            "call_config": {
                "no_op": "CREATE"
            }
        },
        "addIssuer(account,string,string)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "removeIssuer(account)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "isAuthorized(account)bool": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getIssuerInfo(account)(bool,string,string,uint64)": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "IssuerInfo",
                    "elements": [
                        [
                            "isActive",
                            "bool"
                        ],
                        [
                            "name",
                            "string"
                        ],
                        [
                            "url",
                            "string"
                        ],
                        [
                            "addedAt",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "transferAdmin(account)void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 2,
            "num_uints": 1
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "admin": {
                    "type": "bytes",
                    "key": "admin"
                },
                "issuerCount": {
                    "type": "uint64",
                    "key": "issuerCount"
                },
                "name": {
                    "type": "bytes",
                    "key": "name"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "CardlessIssuer",
        "desc": "CardlessIssuer - On-chain registry of authorized issuers for Cardless ID credentials",
        "methods": [
            {
                "name": "createApplication",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Initialize the contract with the admin address"
            },
            {
                "name": "addIssuer",
                "args": [
                    {
                        "type": "account",
                        "name": "issuerAddress",
                        "desc": "- Address of the issuer to add"
                    },
                    {
                        "type": "string",
                        "name": "name",
                        "desc": "- Name/description of the issuer"
                    },
                    {
                        "type": "string",
                        "name": "url"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Add an authorized issuer to the registry"
            },
            {
                "name": "removeIssuer",
                "args": [
                    {
                        "type": "account",
                        "name": "issuerAddress",
                        "desc": "- Address of the issuer to remove"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Remove an issuer from the registry"
            },
            {
                "name": "isAuthorized",
                "args": [
                    {
                        "type": "account",
                        "name": "issuerAddress",
                        "desc": "- Address to check"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "bool",
                    "desc": "true if the address is an active authorized issuer"
                },
                "desc": "Check if an address is an authorized and active issuer"
            },
            {
                "name": "getIssuerInfo",
                "args": [
                    {
                        "type": "account",
                        "name": "issuerAddress",
                        "desc": "- Address of the issuer"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(bool,string,string,uint64)",
                    "desc": "Issuer information (name, active status, timestamp)"
                },
                "desc": "Get information about an issuer"
            },
            {
                "name": "transferAdmin",
                "args": [
                    {
                        "type": "account",
                        "name": "newAdmin",
                        "desc": "- Address of the new admin"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Transfer admin rights to a new address"
            }
        ],
        "networks": {}
    },
    "bare_call_config": {}
}