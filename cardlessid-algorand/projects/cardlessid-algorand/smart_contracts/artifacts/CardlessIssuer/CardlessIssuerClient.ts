/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'

export const APP_SPEC: Arc56Contract = {"name":"CardlessIssuer","structs":{"IssuerInfo":[{"name":"isActive","type":"bool"},{"name":"name","type":"string"},{"name":"url","type":"string"},{"name":"addedAt","type":"uint64"}]},"methods":[{"name":"createApplication","args":[],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]},"readonly":false,"desc":"Initialize the contract with the admin address","events":[],"recommendations":{}},{"name":"addIssuer","args":[{"type":"account","name":"issuerAddress","desc":"- Address of the issuer to add"},{"type":"string","name":"name","desc":"- Name/description of the issuer"},{"type":"string","name":"url"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Add an authorized issuer to the registry","events":[],"recommendations":{}},{"name":"removeIssuer","args":[{"type":"account","name":"issuerAddress","desc":"- Address of the issuer to remove"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Remove an issuer from the registry","events":[],"recommendations":{}},{"name":"isAuthorized","args":[{"type":"account","name":"issuerAddress","desc":"- Address to check"}],"returns":{"type":"bool","desc":"true if the address is an active authorized issuer"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Check if an address is an authorized and active issuer","events":[],"recommendations":{}},{"name":"getIssuerInfo","args":[{"type":"account","name":"issuerAddress","desc":"- Address of the issuer"}],"returns":{"type":"(bool,string,string,uint64)","struct":"IssuerInfo","desc":"Issuer information (name, active status, timestamp)"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get information about an issuer","events":[],"recommendations":{}},{"name":"transferAdmin","args":[{"type":"account","name":"newAdmin","desc":"- Address of the new admin"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Transfer admin rights to a new address","events":[],"recommendations":{}}],"arcs":[22,28],"desc":"CardlessIssuer - On-chain registry of authorized issuers for Cardless ID credentials","networks":{},"state":{"schema":{"global":{"ints":1,"bytes":1},"local":{"ints":0,"bytes":0}},"keys":{"global":{"admin":{"keyType":"AVMString","valueType":"address","key":"YWRtaW4="},"issuerCount":{"keyType":"AVMString","valueType":"AVMUint64","key":"aXNzdWVyQ291bnQ="}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"issuers":{"keyType":"address","valueType":"IssuerInfo","desc":"Box storage for issuer registry (Account -> IssuerInfo)","prefix":"aQ=="}}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[336,375,402],"errorMessage":"Box must have value"},{"pc":[251],"errorMessage":"Issuer already exists"},{"pc":[333],"errorMessage":"Issuer does not exist"},{"pc":[400],"errorMessage":"Issuer not found"},{"pc":[99,117,139,168,186,216],"errorMessage":"OnCompletion is not NoOp"},{"pc":[241],"errorMessage":"Only admin can add issuers"},{"pc":[324],"errorMessage":"Only admin can remove issuers"},{"pc":[414],"errorMessage":"Only admin can transfer admin rights"},{"pc":[220],"errorMessage":"can only call when creating"},{"pc":[102,120,142,171,189],"errorMessage":"can only call when not creating"},{"pc":[239,307,322,348,412],"errorMessage":"check GlobalState exists"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiACAAEmBAtpc3N1ZXJDb3VudAVhZG1pbgFpBBUffHUxGEAAAygiZzEbQQAxggYEuER7NgQnKsgBBD3YOj8EZWlx7gShCPM1BAG4G8o2GgCOBgB3AFkARwAqABQAAiJDMRkURDEYRDYaARfAHIgBJCNDMRkURDEYRDYaARfAHIgBAytMULAjQzEZFEQxGEQ2GgEXwByIAMuAAQAiTwJUK0xQsCNDMRkURDEYRDYaARfAHIgAhSNDMRkURDEYRDYaARfAHDYaAlcCADYaA1cCAIgAFCNDMRkURDEYFESIAAIjQykxAGeJigMAMQAiKWVEEkQqi/1QSb1FARREi/4VFlcGAov+UIv/FRZXBgKL/1AyBxZLAhWBDQgWVwYCgAOAAA1MUExQTwJQTFBLAbxIvyIoZUQjCChMZ4mKAQAxACIpZUQSRCqL/1BJvUUBREm+RCJJVEsBvEi/IihlRCMJKExniYoBASqL/1BJvUUBQAADIkyJiwC+RCJTgAEAIk8CVCJTTImKAQEqi/9QSb1FAUS+RImKAQAxACIpZUQSRCmL/2eJ","clear":"CoEBQw=="},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type IssuerInfo = {
  isActive: boolean,
  name: string,
  url: string,
  addedAt: bigint
}


/**
 * Converts the ABI tuple representation of a IssuerInfo to the struct representation
 */
export function IssuerInfoFromTuple(abiTuple: [boolean, string, string, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.IssuerInfo, APP_SPEC.structs) as IssuerInfo
}

/**
 * The argument types for the CardlessIssuer contract
 */
export type CardlessIssuerArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication()void': Record<string, never>
    'addIssuer(account,string,string)void': {
      /**
       * - Address of the issuer to add
       */
      issuerAddress: Uint8Array | string
      /**
       * - Name/description of the issuer
       */
      name: string
      url: string
    }
    'removeIssuer(account)void': {
      /**
       * - Address of the issuer to remove
       */
      issuerAddress: Uint8Array | string
    }
    'isAuthorized(account)bool': {
      /**
       * - Address to check
       */
      issuerAddress: Uint8Array | string
    }
    'getIssuerInfo(account)(bool,string,string,uint64)': {
      /**
       * - Address of the issuer
       */
      issuerAddress: Uint8Array | string
    }
    'transferAdmin(account)void': {
      /**
       * - Address of the new admin
       */
      newAdmin: Uint8Array | string
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication()void': []
    'addIssuer(account,string,string)void': [issuerAddress: Uint8Array | string, name: string, url: string]
    'removeIssuer(account)void': [issuerAddress: Uint8Array | string]
    'isAuthorized(account)bool': [issuerAddress: Uint8Array | string]
    'getIssuerInfo(account)(bool,string,string,uint64)': [issuerAddress: Uint8Array | string]
    'transferAdmin(account)void': [newAdmin: Uint8Array | string]
  }
}

/**
 * The return type for each method
 */
export type CardlessIssuerReturns = {
  'createApplication()void': void
  'addIssuer(account,string,string)void': void
  'removeIssuer(account)void': void
  'isAuthorized(account)bool': boolean
  'getIssuerInfo(account)(bool,string,string,uint64)': IssuerInfo
  'transferAdmin(account)void': void
}

/**
 * Defines the types of available calls and state of the CardlessIssuer smart contract.
 */
export type CardlessIssuerTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: CardlessIssuerArgs['obj']['createApplication()void']
      argsTuple: CardlessIssuerArgs['tuple']['createApplication()void']
      returns: CardlessIssuerReturns['createApplication()void']
    }>
    & Record<'addIssuer(account,string,string)void' | 'addIssuer', {
      argsObj: CardlessIssuerArgs['obj']['addIssuer(account,string,string)void']
      argsTuple: CardlessIssuerArgs['tuple']['addIssuer(account,string,string)void']
      returns: CardlessIssuerReturns['addIssuer(account,string,string)void']
    }>
    & Record<'removeIssuer(account)void' | 'removeIssuer', {
      argsObj: CardlessIssuerArgs['obj']['removeIssuer(account)void']
      argsTuple: CardlessIssuerArgs['tuple']['removeIssuer(account)void']
      returns: CardlessIssuerReturns['removeIssuer(account)void']
    }>
    & Record<'isAuthorized(account)bool' | 'isAuthorized', {
      argsObj: CardlessIssuerArgs['obj']['isAuthorized(account)bool']
      argsTuple: CardlessIssuerArgs['tuple']['isAuthorized(account)bool']
      /**
       * true if the address is an active authorized issuer
       */
      returns: CardlessIssuerReturns['isAuthorized(account)bool']
    }>
    & Record<'getIssuerInfo(account)(bool,string,string,uint64)' | 'getIssuerInfo', {
      argsObj: CardlessIssuerArgs['obj']['getIssuerInfo(account)(bool,string,string,uint64)']
      argsTuple: CardlessIssuerArgs['tuple']['getIssuerInfo(account)(bool,string,string,uint64)']
      /**
       * Issuer information (name, active status, timestamp)
       */
      returns: CardlessIssuerReturns['getIssuerInfo(account)(bool,string,string,uint64)']
    }>
    & Record<'transferAdmin(account)void' | 'transferAdmin', {
      argsObj: CardlessIssuerArgs['obj']['transferAdmin(account)void']
      argsTuple: CardlessIssuerArgs['tuple']['transferAdmin(account)void']
      returns: CardlessIssuerReturns['transferAdmin(account)void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        admin: string
        issuerCount: bigint
      }
      maps: {}
    }
    box: {
      keys: {}
      maps: {
        /**
         * Box storage for issuer registry (Account -> IssuerInfo)
         */
        issuers: Map<string, IssuerInfo>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type CardlessIssuerSignatures = keyof CardlessIssuerTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type CardlessIssuerNonVoidMethodSignatures = keyof CardlessIssuerTypes['methods'] extends infer T ? T extends keyof CardlessIssuerTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the CardlessIssuer smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends CardlessIssuerSignatures> = CardlessIssuerTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the CardlessIssuer smart contract to the method's return type
 */
export type MethodReturn<TSignature extends CardlessIssuerSignatures> = CardlessIssuerTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = CardlessIssuerTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = CardlessIssuerTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type CardlessIssuerCreateCallParams =
  | Expand<CallParams<CardlessIssuerArgs['obj']['createApplication()void'] | CardlessIssuerArgs['tuple']['createApplication()void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<CardlessIssuerArgs['obj']['createApplication()void'] | CardlessIssuerArgs['tuple']['createApplication()void']> & {method: 'createApplication()void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type CardlessIssuerDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: CardlessIssuerCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the CardlessIssuer smart contract
 */
export abstract class CardlessIssuerParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends CardlessIssuerCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication()void':
            return CardlessIssuerParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the CardlessIssuer smart contract using the createApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<CardlessIssuerArgs['obj']['createApplication()void'] | CardlessIssuerArgs['tuple']['createApplication()void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the addIssuer(account,string,string)void ABI method
   *
   * Add an authorized issuer to the registry
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static addIssuer(params: CallParams<CardlessIssuerArgs['obj']['addIssuer(account,string,string)void'] | CardlessIssuerArgs['tuple']['addIssuer(account,string,string)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'addIssuer(account,string,string)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.issuerAddress, params.args.name, params.args.url],
    }
  }
  /**
   * Constructs a no op call for the removeIssuer(account)void ABI method
   *
   * Remove an issuer from the registry
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static removeIssuer(params: CallParams<CardlessIssuerArgs['obj']['removeIssuer(account)void'] | CardlessIssuerArgs['tuple']['removeIssuer(account)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'removeIssuer(account)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.issuerAddress],
    }
  }
  /**
   * Constructs a no op call for the isAuthorized(account)bool ABI method
   *
   * Check if an address is an authorized and active issuer
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static isAuthorized(params: CallParams<CardlessIssuerArgs['obj']['isAuthorized(account)bool'] | CardlessIssuerArgs['tuple']['isAuthorized(account)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'isAuthorized(account)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.issuerAddress],
    }
  }
  /**
   * Constructs a no op call for the getIssuerInfo(account)(bool,string,string,uint64) ABI method
   *
   * Get information about an issuer
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getIssuerInfo(params: CallParams<CardlessIssuerArgs['obj']['getIssuerInfo(account)(bool,string,string,uint64)'] | CardlessIssuerArgs['tuple']['getIssuerInfo(account)(bool,string,string,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getIssuerInfo(account)(bool,string,string,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.issuerAddress],
    }
  }
  /**
   * Constructs a no op call for the transferAdmin(account)void ABI method
   *
   * Transfer admin rights to a new address
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static transferAdmin(params: CallParams<CardlessIssuerArgs['obj']['transferAdmin(account)void'] | CardlessIssuerArgs['tuple']['transferAdmin(account)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'transferAdmin(account)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newAdmin],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the CardlessIssuer smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class CardlessIssuerFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `CardlessIssuerFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new CardlessIssuerClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new CardlessIssuerClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the CardlessIssuer smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: CardlessIssuerDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? CardlessIssuerParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (CardlessIssuerCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new CardlessIssuerClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the CardlessIssuer smart contract using the createApplication()void ABI method.
       *
       * Initialize the contract with the admin address
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<CardlessIssuerArgs['obj']['createApplication()void'] | CardlessIssuerArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.params.create(CardlessIssuerParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the CardlessIssuer smart contract using the createApplication()void ABI method.
       *
       * Initialize the contract with the admin address
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<CardlessIssuerArgs['obj']['createApplication()void'] | CardlessIssuerArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.createTransaction.create(CardlessIssuerParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the CardlessIssuer smart contract using an ABI method call using the createApplication()void ABI method.
       *
       * Initialize the contract with the admin address
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<CardlessIssuerArgs['obj']['createApplication()void'] | CardlessIssuerArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        const result = await this.appFactory.send.create(CardlessIssuerParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | CardlessIssuerReturns['createApplication()void']) }, appClient: new CardlessIssuerClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the CardlessIssuer smart contract
 */
export class CardlessIssuerClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `CardlessIssuerClient`
   *
   * @param appClient An `AppClient` instance which has been created with the CardlessIssuer app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `CardlessIssuerClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends CardlessIssuerNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `CardlessIssuerClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<CardlessIssuerClient> {
    return new CardlessIssuerClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `CardlessIssuerClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<CardlessIssuerClient> {
    return new CardlessIssuerClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the CardlessIssuer smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the CardlessIssuer smart contract using the `addIssuer(account,string,string)void` ABI method.
     *
     * Add an authorized issuer to the registry
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    addIssuer: (params: CallParams<CardlessIssuerArgs['obj']['addIssuer(account,string,string)void'] | CardlessIssuerArgs['tuple']['addIssuer(account,string,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CardlessIssuerParamsFactory.addIssuer(params))
    },

    /**
     * Makes a call to the CardlessIssuer smart contract using the `removeIssuer(account)void` ABI method.
     *
     * Remove an issuer from the registry
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    removeIssuer: (params: CallParams<CardlessIssuerArgs['obj']['removeIssuer(account)void'] | CardlessIssuerArgs['tuple']['removeIssuer(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CardlessIssuerParamsFactory.removeIssuer(params))
    },

    /**
     * Makes a call to the CardlessIssuer smart contract using the `isAuthorized(account)bool` ABI method.
     *
     * Check if an address is an authorized and active issuer
     *
     * @param params The params for the smart contract call
     * @returns The call params: true if the address is an active authorized issuer
     */
    isAuthorized: (params: CallParams<CardlessIssuerArgs['obj']['isAuthorized(account)bool'] | CardlessIssuerArgs['tuple']['isAuthorized(account)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CardlessIssuerParamsFactory.isAuthorized(params))
    },

    /**
     * Makes a call to the CardlessIssuer smart contract using the `getIssuerInfo(account)(bool,string,string,uint64)` ABI method.
     *
     * Get information about an issuer
     *
     * @param params The params for the smart contract call
     * @returns The call params: Issuer information (name, active status, timestamp)
     */
    getIssuerInfo: (params: CallParams<CardlessIssuerArgs['obj']['getIssuerInfo(account)(bool,string,string,uint64)'] | CardlessIssuerArgs['tuple']['getIssuerInfo(account)(bool,string,string,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CardlessIssuerParamsFactory.getIssuerInfo(params))
    },

    /**
     * Makes a call to the CardlessIssuer smart contract using the `transferAdmin(account)void` ABI method.
     *
     * Transfer admin rights to a new address
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    transferAdmin: (params: CallParams<CardlessIssuerArgs['obj']['transferAdmin(account)void'] | CardlessIssuerArgs['tuple']['transferAdmin(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CardlessIssuerParamsFactory.transferAdmin(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the CardlessIssuer smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the CardlessIssuer smart contract using the `addIssuer(account,string,string)void` ABI method.
     *
     * Add an authorized issuer to the registry
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    addIssuer: (params: CallParams<CardlessIssuerArgs['obj']['addIssuer(account,string,string)void'] | CardlessIssuerArgs['tuple']['addIssuer(account,string,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CardlessIssuerParamsFactory.addIssuer(params))
    },

    /**
     * Makes a call to the CardlessIssuer smart contract using the `removeIssuer(account)void` ABI method.
     *
     * Remove an issuer from the registry
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    removeIssuer: (params: CallParams<CardlessIssuerArgs['obj']['removeIssuer(account)void'] | CardlessIssuerArgs['tuple']['removeIssuer(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CardlessIssuerParamsFactory.removeIssuer(params))
    },

    /**
     * Makes a call to the CardlessIssuer smart contract using the `isAuthorized(account)bool` ABI method.
     *
     * Check if an address is an authorized and active issuer
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: true if the address is an active authorized issuer
     */
    isAuthorized: (params: CallParams<CardlessIssuerArgs['obj']['isAuthorized(account)bool'] | CardlessIssuerArgs['tuple']['isAuthorized(account)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CardlessIssuerParamsFactory.isAuthorized(params))
    },

    /**
     * Makes a call to the CardlessIssuer smart contract using the `getIssuerInfo(account)(bool,string,string,uint64)` ABI method.
     *
     * Get information about an issuer
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: Issuer information (name, active status, timestamp)
     */
    getIssuerInfo: (params: CallParams<CardlessIssuerArgs['obj']['getIssuerInfo(account)(bool,string,string,uint64)'] | CardlessIssuerArgs['tuple']['getIssuerInfo(account)(bool,string,string,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CardlessIssuerParamsFactory.getIssuerInfo(params))
    },

    /**
     * Makes a call to the CardlessIssuer smart contract using the `transferAdmin(account)void` ABI method.
     *
     * Transfer admin rights to a new address
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    transferAdmin: (params: CallParams<CardlessIssuerArgs['obj']['transferAdmin(account)void'] | CardlessIssuerArgs['tuple']['transferAdmin(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CardlessIssuerParamsFactory.transferAdmin(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the CardlessIssuer smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the CardlessIssuer smart contract using the `addIssuer(account,string,string)void` ABI method.
     *
     * Add an authorized issuer to the registry
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    addIssuer: async (params: CallParams<CardlessIssuerArgs['obj']['addIssuer(account,string,string)void'] | CardlessIssuerArgs['tuple']['addIssuer(account,string,string)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CardlessIssuerParamsFactory.addIssuer(params))
      return {...result, return: result.return as unknown as (undefined | CardlessIssuerReturns['addIssuer(account,string,string)void'])}
    },

    /**
     * Makes a call to the CardlessIssuer smart contract using the `removeIssuer(account)void` ABI method.
     *
     * Remove an issuer from the registry
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    removeIssuer: async (params: CallParams<CardlessIssuerArgs['obj']['removeIssuer(account)void'] | CardlessIssuerArgs['tuple']['removeIssuer(account)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CardlessIssuerParamsFactory.removeIssuer(params))
      return {...result, return: result.return as unknown as (undefined | CardlessIssuerReturns['removeIssuer(account)void'])}
    },

    /**
     * Makes a call to the CardlessIssuer smart contract using the `isAuthorized(account)bool` ABI method.
     *
     * Check if an address is an authorized and active issuer
     *
     * @param params The params for the smart contract call
     * @returns The call result: true if the address is an active authorized issuer
     */
    isAuthorized: async (params: CallParams<CardlessIssuerArgs['obj']['isAuthorized(account)bool'] | CardlessIssuerArgs['tuple']['isAuthorized(account)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CardlessIssuerParamsFactory.isAuthorized(params))
      return {...result, return: result.return as unknown as (undefined | CardlessIssuerReturns['isAuthorized(account)bool'])}
    },

    /**
     * Makes a call to the CardlessIssuer smart contract using the `getIssuerInfo(account)(bool,string,string,uint64)` ABI method.
     *
     * Get information about an issuer
     *
     * @param params The params for the smart contract call
     * @returns The call result: Issuer information (name, active status, timestamp)
     */
    getIssuerInfo: async (params: CallParams<CardlessIssuerArgs['obj']['getIssuerInfo(account)(bool,string,string,uint64)'] | CardlessIssuerArgs['tuple']['getIssuerInfo(account)(bool,string,string,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CardlessIssuerParamsFactory.getIssuerInfo(params))
      return {...result, return: result.return as unknown as (undefined | CardlessIssuerReturns['getIssuerInfo(account)(bool,string,string,uint64)'])}
    },

    /**
     * Makes a call to the CardlessIssuer smart contract using the `transferAdmin(account)void` ABI method.
     *
     * Transfer admin rights to a new address
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    transferAdmin: async (params: CallParams<CardlessIssuerArgs['obj']['transferAdmin(account)void'] | CardlessIssuerArgs['tuple']['transferAdmin(account)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CardlessIssuerParamsFactory.transferAdmin(params))
      return {...result, return: result.return as unknown as (undefined | CardlessIssuerReturns['transferAdmin(account)void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new CardlessIssuerClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current CardlessIssuer app
   */
  state = {
    /**
     * Methods to access global state for the current CardlessIssuer app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          admin: result.admin,
          issuerCount: result.issuerCount,
        }
      },
      /**
       * Get the current value of the admin key in global state
       */
      admin: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("admin")) as string | undefined },
      /**
       * Get the current value of the issuerCount key in global state
       */
      issuerCount: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("issuerCount")) as bigint | undefined },
    },
    /**
     * Methods to access box state for the current CardlessIssuer app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the issuers map in box state
       */
      issuers: {
        /**
         * Get all current values of the issuers map in box state
         */
        getMap: async (): Promise<Map<string, IssuerInfo>> => { return (await this.appClient.state.box.getMap("issuers")) as Map<string, IssuerInfo> },
        /**
         * Get a current value of the issuers map by key from box state
         */
        value: async (key: string): Promise<IssuerInfo | undefined> => { return await this.appClient.state.box.getMapValue("issuers", key) as IssuerInfo | undefined },
      },
    },
  }

  public newGroup(): CardlessIssuerComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a addIssuer(account,string,string)void method call against the CardlessIssuer contract
       */
      addIssuer(params: CallParams<CardlessIssuerArgs['obj']['addIssuer(account,string,string)void'] | CardlessIssuerArgs['tuple']['addIssuer(account,string,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.addIssuer(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a removeIssuer(account)void method call against the CardlessIssuer contract
       */
      removeIssuer(params: CallParams<CardlessIssuerArgs['obj']['removeIssuer(account)void'] | CardlessIssuerArgs['tuple']['removeIssuer(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.removeIssuer(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a isAuthorized(account)bool method call against the CardlessIssuer contract
       */
      isAuthorized(params: CallParams<CardlessIssuerArgs['obj']['isAuthorized(account)bool'] | CardlessIssuerArgs['tuple']['isAuthorized(account)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.isAuthorized(params)))
        resultMappers.push((v) => client.decodeReturnValue('isAuthorized(account)bool', v))
        return this
      },
      /**
       * Add a getIssuerInfo(account)(bool,string,string,uint64) method call against the CardlessIssuer contract
       */
      getIssuerInfo(params: CallParams<CardlessIssuerArgs['obj']['getIssuerInfo(account)(bool,string,string,uint64)'] | CardlessIssuerArgs['tuple']['getIssuerInfo(account)(bool,string,string,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getIssuerInfo(params)))
        resultMappers.push((v) => client.decodeReturnValue('getIssuerInfo(account)(bool,string,string,uint64)', v))
        return this
      },
      /**
       * Add a transferAdmin(account)void method call against the CardlessIssuer contract
       */
      transferAdmin(params: CallParams<CardlessIssuerArgs['obj']['transferAdmin(account)void'] | CardlessIssuerArgs['tuple']['transferAdmin(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.transferAdmin(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the CardlessIssuer contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as CardlessIssuerComposer
  }
}
export type CardlessIssuerComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the addIssuer(account,string,string)void ABI method.
   *
   * Add an authorized issuer to the registry
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addIssuer(params?: CallParams<CardlessIssuerArgs['obj']['addIssuer(account,string,string)void'] | CardlessIssuerArgs['tuple']['addIssuer(account,string,string)void']>): CardlessIssuerComposer<[...TReturns, CardlessIssuerReturns['addIssuer(account,string,string)void'] | undefined]>

  /**
   * Calls the removeIssuer(account)void ABI method.
   *
   * Remove an issuer from the registry
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  removeIssuer(params?: CallParams<CardlessIssuerArgs['obj']['removeIssuer(account)void'] | CardlessIssuerArgs['tuple']['removeIssuer(account)void']>): CardlessIssuerComposer<[...TReturns, CardlessIssuerReturns['removeIssuer(account)void'] | undefined]>

  /**
   * Calls the isAuthorized(account)bool ABI method.
   *
   * Check if an address is an authorized and active issuer
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  isAuthorized(params?: CallParams<CardlessIssuerArgs['obj']['isAuthorized(account)bool'] | CardlessIssuerArgs['tuple']['isAuthorized(account)bool']>): CardlessIssuerComposer<[...TReturns, CardlessIssuerReturns['isAuthorized(account)bool'] | undefined]>

  /**
   * Calls the getIssuerInfo(account)(bool,string,string,uint64) ABI method.
   *
   * Get information about an issuer
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getIssuerInfo(params?: CallParams<CardlessIssuerArgs['obj']['getIssuerInfo(account)(bool,string,string,uint64)'] | CardlessIssuerArgs['tuple']['getIssuerInfo(account)(bool,string,string,uint64)']>): CardlessIssuerComposer<[...TReturns, CardlessIssuerReturns['getIssuerInfo(account)(bool,string,string,uint64)'] | undefined]>

  /**
   * Calls the transferAdmin(account)void ABI method.
   *
   * Transfer admin rights to a new address
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  transferAdmin(params?: CallParams<CardlessIssuerArgs['obj']['transferAdmin(account)void'] | CardlessIssuerArgs['tuple']['transferAdmin(account)void']>): CardlessIssuerComposer<[...TReturns, CardlessIssuerReturns['transferAdmin(account)void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the CardlessIssuer smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): CardlessIssuerComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): CardlessIssuerComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<CardlessIssuerComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<CardlessIssuerComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<CardlessIssuerComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<CardlessIssuerComposerResults<TReturns>>
}
export type CardlessIssuerComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

