{
    "name": "CardlessIssuer",
    "structs": {
        "IssuerInfo": [
            {
                "name": "isActive",
                "type": "bool"
            },
            {
                "name": "name",
                "type": "string"
            },
            {
                "name": "url",
                "type": "string"
            },
            {
                "name": "addedAt",
                "type": "uint64"
            }
        ]
    },
    "methods": [
        {
            "name": "createApplication",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [
                    "NoOp"
                ],
                "call": []
            },
            "readonly": false,
            "desc": "Initialize the contract with the admin address",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "addIssuer",
            "args": [
                {
                    "type": "account",
                    "name": "issuerAddress",
                    "desc": "- Address of the issuer to add"
                },
                {
                    "type": "string",
                    "name": "name",
                    "desc": "- Name/description of the issuer"
                },
                {
                    "type": "string",
                    "name": "url"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Add an authorized issuer to the registry",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "removeIssuer",
            "args": [
                {
                    "type": "account",
                    "name": "issuerAddress",
                    "desc": "- Address of the issuer to remove"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Remove an issuer from the registry",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "isAuthorized",
            "args": [
                {
                    "type": "account",
                    "name": "issuerAddress",
                    "desc": "- Address to check"
                }
            ],
            "returns": {
                "type": "bool",
                "desc": "true if the address is an active authorized issuer"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Check if an address is an authorized and active issuer",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getIssuerInfo",
            "args": [
                {
                    "type": "account",
                    "name": "issuerAddress",
                    "desc": "- Address of the issuer"
                }
            ],
            "returns": {
                "type": "(bool,string,string,uint64)",
                "struct": "IssuerInfo",
                "desc": "Issuer information (name, active status, timestamp)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Get information about an issuer",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "transferAdmin",
            "args": [
                {
                    "type": "account",
                    "name": "newAdmin",
                    "desc": "- Address of the new admin"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Transfer admin rights to a new address",
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "desc": "CardlessIssuer - On-chain registry of authorized issuers for Cardless ID credentials",
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 1,
                "bytes": 1
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "admin": {
                    "keyType": "AVMString",
                    "valueType": "address",
                    "key": "YWRtaW4="
                },
                "issuerCount": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "aXNzdWVyQ291bnQ="
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "issuers": {
                    "keyType": "address",
                    "valueType": "IssuerInfo",
                    "desc": "Box storage for issuer registry (Account -> IssuerInfo)",
                    "prefix": "aQ=="
                }
            }
        }
    },
    "bareActions": {
        "create": [],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        336,
                        375,
                        402
                    ],
                    "errorMessage": "Box must have value"
                },
                {
                    "pc": [
                        251
                    ],
                    "errorMessage": "Issuer already exists"
                },
                {
                    "pc": [
                        333
                    ],
                    "errorMessage": "Issuer does not exist"
                },
                {
                    "pc": [
                        400
                    ],
                    "errorMessage": "Issuer not found"
                },
                {
                    "pc": [
                        99,
                        117,
                        139,
                        168,
                        186,
                        216
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        241
                    ],
                    "errorMessage": "Only admin can add issuers"
                },
                {
                    "pc": [
                        324
                    ],
                    "errorMessage": "Only admin can remove issuers"
                },
                {
                    "pc": [
                        414
                    ],
                    "errorMessage": "Only admin can transfer admin rights"
                },
                {
                    "pc": [
                        220
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        102,
                        120,
                        142,
                        171,
                        189
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        239,
                        307,
                        322,
                        348,
                        412
                    ],
                    "errorMessage": "check GlobalState exists"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiACAAEmBAtpc3N1ZXJDb3VudAVhZG1pbgFpBBUffHUxGEAAAygiZzEbQQAxggYEuER7NgQnKsgBBD3YOj8EZWlx7gShCPM1BAG4G8o2GgCOBgB3AFkARwAqABQAAiJDMRkURDEYRDYaARfAHIgBJCNDMRkURDEYRDYaARfAHIgBAytMULAjQzEZFEQxGEQ2GgEXwByIAMuAAQAiTwJUK0xQsCNDMRkURDEYRDYaARfAHIgAhSNDMRkURDEYRDYaARfAHDYaAlcCADYaA1cCAIgAFCNDMRkURDEYFESIAAIjQykxAGeJigMAMQAiKWVEEkQqi/1QSb1FARREi/4VFlcGAov+UIv/FRZXBgKL/1AyBxZLAhWBDQgWVwYCgAOAAA1MUExQTwJQTFBLAbxIvyIoZUQjCChMZ4mKAQAxACIpZUQSRCqL/1BJvUUBREm+RCJJVEsBvEi/IihlRCMJKExniYoBASqL/1BJvUUBQAADIkyJiwC+RCJTgAEAIk8CVCJTTImKAQEqi/9QSb1FAUS+RImKAQAxACIpZUQSRCmL/2eJ",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 7,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}